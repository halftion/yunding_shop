<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <mvc:annotation-driven>
        <!--Spring MVC 解决 Could not write JSON: No serializer found for class java.lang.Object
            articleUrl:https://blog.csdn.net/kinginblue/article/details/51236938 -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json; charset=UTF-8</value>
                        <value>application/x-www-form-urlencoded; charset=UTF-8</value>
                    </list>
                </property>
                <!-- 配置 objectMapper 为我们自定义扩展后的 CustomMapper -->
                <property name="objectMapper">
                    <bean class="yunding.shop.config.CustomMapper">
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <mvc:interceptor>
            <mvc:mapping path="/api/user/**"/>
            <mvc:mapping path="/api/order/**"/>
            <mvc:mapping path="/api/aliPay/**"/>
            <mvc:mapping path="/api/photo/**"/>
            <mvc:exclude-mapping path="/api/user/checkLoginName/**"/>
            <mvc:exclude-mapping path="/api/user/login/**"/>
            <mvc:exclude-mapping path="/api/user/register/**"/>
            <mvc:exclude-mapping path="/api/verificationCode"/>
            <!-- 定义在mvc:interceptor下面的Interceptor表示是对特定的请求才进行拦截的 -->
            <bean class="yunding.shop.config.ApiInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <context:component-scan base-package="yunding.shop.web"/>

    <mvc:default-servlet-handler/>

    <bean id="viewResolverCommon" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".ftl"/>
        <property name="order" value="0"/>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设定默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 设定文件上传的最大值5MB，5*1024*1024 -->
        <property name="maxUploadSize" value="52428800000"/>
    </bean>
</beans>